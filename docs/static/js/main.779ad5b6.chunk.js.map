{"version":3,"sources":["util.js","App.js","serviceWorker.js","index.js"],"names":["util","spotify","cookies","Cookies","window","location","hash","length","querystring","slice","query","QueryString","parse","access_token","set","maxAge","href","split","spotifyAccessToken","get","setAccessToken","scopes","encodeURIComponent","redirect_uri","origin","url","concat","Spotify","Util","DeviceSelect","options","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","this","props","devices","Symbol","iterator","next","done","device","value","option","react_default","a","createElement","key","id","name","push","err","return","onChange","createOptions","React","Component","StartButton","text","gameHasStarted","gameIsPaused","onClick","Timer","minutes","toString","padStart","seconds","TrackInformation","className","src","albumImage","alt","albumName","width","height","songName","artists","RestartButton","styles","visibility","style","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","getInitialState","deviceSelectChangeHandler","bind","assertThisInitialized","startButtonClickHandler","currentDeviceID","tickIntervalID","Promise","all","getMyDevices","getMyCurrentPlaybackState","setState","setInterval","_this2","getDevices","getCurrentTrack","getMyCurrentPlayingTrack","result","is_playing","item","i","artist","album","images","event","target","transferMyPlayback","intervalID","_this3","tick","play","device_id","pause","skipToNext","App_DeviceSelect","App_StartButton","App_Timer","App_TrackInformation","App_RestartButton","restartButtonClickHandler","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.779ad5b6.chunk.js","sourcesContent":["import Cookies from 'universal-cookie';\nimport QueryString from 'querystring';\n\nconst setupSpotify = spotify => {\n  const cookies = new Cookies();\n\n  // Get access token from Spotify implicit grant flow redirect callback, and set cookie\n  if (window.location.hash.length > 1) {\n    const querystring = window.location.hash.slice(1);\n    const query = QueryString.parse(querystring);\n    if (query.access_token) {\n      cookies.set('spotify-access-token', query.access_token, { maxAge: 3595 });\n      // Final redirect to remove the hash, not really necessary, but url looks nicer\n      window.location = window.location.href.split('#')[0];\n    }\n  }\n\n  // Get token from cookie and use it to set up Spotify client, if not start the implicit grant flow\n  const spotifyAccessToken = cookies.get('spotify-access-token');\n  if (spotifyAccessToken) {\n    spotify.setAccessToken(spotifyAccessToken);\n  } else {\n    const client_id = 'ff53948d58f1491baa6169d34bc4179a';\n    const scopes = encodeURIComponent(\n      'user-read-playback-state user-modify-playback-state'\n    );\n    const redirect_uri = window.location.origin;\n    const url = `https://accounts.spotify.com/authorize?response_type=token&client_id=${client_id}&scope=${scopes}&redirect_uri=${redirect_uri}`;\n    window.location = url;\n  }\n};\n\nexport default { setupSpotify };\n","import React from 'react';\nimport Spotify from 'spotify-web-api-js';\nimport Util from './util';\nimport './App.css';\n\n// Set up Spotify. This must execute immediately incase a redirect is necessary. There is maybe a\n// better practice for where this function should be called.\nconst spotify = new Spotify();\nUtil.setupSpotify(spotify);\n\nclass DeviceSelect extends React.Component {\n  createOptions() {\n    const options = [];\n    for (const device of this.props.devices) {\n      const option = (\n        <option key={device.id} value={device.id}>\n          {device.name}\n        </option>\n      );\n      options.push(option);\n    }\n    return options;\n  }\n\n  render() {\n    return (\n      <select value={this.props.value} onChange={this.props.onChange}>\n        {this.createOptions()}\n      </select>\n    );\n  }\n}\n\nclass StartButton extends React.Component {\n  render() {\n    const text = this.props.gameHasStarted\n      ? this.props.gameIsPaused\n        ? 'Resume'\n        : 'Pause'\n      : 'Play';\n    return <button onClick={this.props.onClick}>{text}</button>;\n  }\n}\n\nclass Timer extends React.Component {\n  render() {\n    const minutes = this.props.minutes.toString().padStart(2, '0');\n    const seconds = this.props.seconds.toString().padStart(2, '0');\n    return (\n      <span>\n        {minutes}:{seconds}\n      </span>\n    );\n  }\n}\n\nclass TrackInformation extends React.Component {\n  render() {\n    return (\n      <div className=\"track-information\">\n        <img\n          src={this.props.albumImage}\n          alt={this.props.albumName}\n          width=\"175\"\n          height=\"175\"\n        />\n        <p className=\"song-name\">{this.props.songName}</p>\n        <p className=\"artists\">{this.props.artists}</p>\n      </div>\n    );\n  }\n}\n\nclass RestartButton extends React.Component {\n  render() {\n    const styles = {\n      visibility: this.props.gameHasStarted ? 'visible' : 'hidden',\n    };\n\n    return (\n      <button\n        style={styles}\n        className=\"restart-button\"\n        onClick={this.props.onClick}\n      >\n        Restart\n      </button>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Set initial state\n    this.state = this.getInitialState();\n\n    // Bind class functions\n    this.deviceSelectChangeHandler = this.deviceSelectChangeHandler.bind(this);\n    this.startButtonClickHandler = this.startButtonClickHandler.bind(this);\n  }\n\n  getInitialState() {\n    return {\n      devices: [],\n      currentDeviceID: '',\n      minutes: 0,\n      seconds: 0,\n      gameIsPaused: true,\n      gameHasStarted: false,\n      tickIntervalID: null,\n      songName: null,\n      artists: null,\n      albumImage: null,\n      albumName: null,\n    };\n  }\n\n  async componentDidMount() {\n    // Load data from Spotify\n    const [{ devices }, { device }] = await Promise.all([\n      spotify.getMyDevices(),\n      spotify.getMyCurrentPlaybackState(),\n    ]);\n    this.setState({ devices, currentDeviceID: device.id });\n\n    // Keep an eye on available devices\n    setInterval(() => this.getDevices(), 5000);\n\n    // Keep an eye on current track and play status\n    setInterval(() => this.getCurrentTrack(), 900);\n  }\n\n  async getDevices() {\n    const { devices } = await spotify.getMyDevices();\n    this.setState({ devices });\n  }\n\n  async getCurrentTrack() {\n    const result = await spotify.getMyCurrentPlayingTrack();\n\n    // Only update gameIsPaused if the game is started\n    let gameIsPaused = this.state.gameIsPaused;\n    if (this.state.gameHasStarted) {\n      gameIsPaused = !result.is_playing;\n    }\n\n    // Always update track info\n    const songName = result.item.name;\n    let artists = '';\n    for (let i = 0; i < result.item.artists.length; i++) {\n      const artist = result.item.artists[i];\n      artists += artist.name;\n      if (i < result.item.artists.length - 1) {\n        artists += ', ';\n      }\n    }\n    const albumImage =\n      result.item.album.images[result.item.album.images.length - 2].url;\n    let albumName = '';\n    if (result && result.item && result.item.album && result.item.album.name) {\n      albumName = result.item.album.name;\n    }\n\n    // Update the state\n    this.setState({ gameIsPaused, songName, artists, albumImage, albumName });\n  }\n\n  async deviceSelectChangeHandler(event) {\n    // Update the state\n    this.setState({ currentDeviceID: event.target.value });\n    // Switch Spotify play to selected device\n    await spotify.transferMyPlayback([event.target.value]);\n  }\n\n  async startButtonClickHandler() {\n    // If the game has not yet started, start the game\n    if (!this.state.gameHasStarted) {\n      const intervalID = setInterval(() => this.tick(), 1000);\n      this.setState({ gameHasStarted: true, tickIntervalID: intervalID });\n    }\n\n    if (this.state.gameIsPaused) {\n      // Pause Spotify using the selected device\n      await spotify.play({ device_id: this.state.currentDeviceID });\n    } else {\n      // Play Spotify using the selected device\n      await spotify.pause();\n    }\n  }\n\n  tick() {\n    // If the game is not active, exit the function\n    if (this.state.gameIsPaused) {\n      return;\n    }\n\n    // Update the counter\n    let seconds = this.state.seconds + 1;\n    let minutes = this.state.minutes;\n    const secondsInOneMinute = 60;\n    if (seconds >= secondsInOneMinute) {\n      seconds = 0;\n      minutes += 1;\n    }\n    this.setState({ seconds, minutes });\n\n    // Skip to next track if seconds is 0, do not await\n    if (seconds === 0) {\n      spotify.skipToNext();\n    }\n  }\n\n  restartButtonClickHandler() {\n    // // Stop tick interval\n    // clearInterval(this.state.tickIntervalID);\n    // // Reset state\n    // this.setState(this.getInitialState());\n\n    // For now, just reload the page\n    window.location = window.location.href;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <DeviceSelect\n          value={this.state.currentDeviceID}\n          onChange={this.deviceSelectChangeHandler}\n          devices={this.state.devices}\n        />\n        <StartButton\n          onClick={this.startButtonClickHandler}\n          gameHasStarted={this.state.gameHasStarted}\n          gameIsPaused={this.state.gameIsPaused}\n        />\n        <Timer minutes={this.state.minutes} seconds={this.state.seconds} />\n        <TrackInformation\n          songName={this.state.songName}\n          artists={this.state.artists}\n          albumImage={this.state.albumImage}\n          albumName={this.state.albumName}\n        />\n        <RestartButton\n          onClick={this.restartButtonClickHandler}\n          gameHasStarted={this.state.gameHasStarted}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}