{"version":3,"sources":["util.js","App.js","serviceWorker.js","index.js"],"names":["util","spotify","cookies","Cookies","window","location","hash","length","querystring","slice","query","QueryString","parse","access_token","set","href","split","spotifyAccessToken","get","setAccessToken","scopes","encodeURIComponent","redirect_uri","origin","url","concat","Spotify","Util","StartButton","props","react_default","a","createElement","onClick","DeviceSelect","options","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","this","devices","Symbol","iterator","next","done","device","value","option","key","id","name","push","err","return","onChange","createOptions","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","currentDeviceID","deviceSelectChangeHandler","bind","assertThisInitialized","startButtonClickHandler","Promise","all","getMyDevices","getMyCurrentPlaybackState","setState","event","target","transferMyPlayback","play","device_id","className","App_DeviceSelect","App_StartButton","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2ea97b2.chunk.js","sourcesContent":["import Cookies from 'universal-cookie';\nimport QueryString from 'querystring';\n\nconst setupSpotify = spotify => {\n  const cookies = new Cookies();\n\n  // Get access token from Spotify implicit grant flow redirect callback, and set cookie\n  if (window.location.hash.length > 1) {\n    const querystring = window.location.hash.slice(1);\n    const query = QueryString.parse(querystring);\n    if (query.access_token) {\n      cookies.set('spotify-access-token', query.access_token);\n      // Final redirect to remove the hash, not really necessary, but url looks nicer\n      window.location = window.location.href.split('#')[0];\n    }\n  }\n\n  // Get token from cookie and use it to set up Spotify client, if not start the implicit grant flow\n  const spotifyAccessToken = cookies.get('spotify-access-token');\n  if (spotifyAccessToken) {\n    spotify.setAccessToken(spotifyAccessToken);\n  } else {\n    const client_id = 'ff53948d58f1491baa6169d34bc4179a';\n    const scopes = encodeURIComponent(\n      'user-read-playback-state user-modify-playback-state'\n    );\n    const redirect_uri = window.location.origin;\n    const url = `https://accounts.spotify.com/authorize?response_type=token&client_id=${client_id}&scope=${scopes}&redirect_uri=${redirect_uri}`;\n    window.location = url;\n  }\n};\n\nexport default { setupSpotify };\n","import React from 'react';\nimport Spotify from 'spotify-web-api-js';\nimport Util from './util';\nimport './App.css';\n\n// Set up Spotify. This must execute immediately incase a redirect is necessary. There is maybe a\n// better practice for where this function should be called.\nconst spotify = new Spotify();\nUtil.setupSpotify(spotify);\n\nconst StartButton = props => <button onClick={props.onClick}>Start</button>;\n\nclass DeviceSelect extends React.Component {\n  createOptions() {\n    const options = [];\n    for (const device of this.props.devices) {\n      const option = (\n        <option key={device.id} value={device.id}>\n          {device.name}\n        </option>\n      );\n      options.push(option);\n    }\n    return options;\n  }\n\n  render() {\n    return (\n      <select value={this.props.value} onChange={this.props.onChange}>\n        {this.createOptions()}\n      </select>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Set initial state\n    this.state = {\n      devices: [],\n      currentDeviceID: '',\n    };\n\n    // Bind class functions\n    this.deviceSelectChangeHandler = this.deviceSelectChangeHandler.bind(this);\n    this.startButtonClickHandler = this.startButtonClickHandler.bind(this);\n  }\n\n  async componentDidMount() {\n    // Load data from Spotify\n    // TODO: Need to handle empty devices list (and maybe missing device from current playback)\n    const [{ devices }, { device }] = await Promise.all([\n      spotify.getMyDevices(),\n      spotify.getMyCurrentPlaybackState(),\n    ]);\n    this.setState({ devices, currentDeviceID: device.id });\n  }\n\n  async deviceSelectChangeHandler(event) {\n    // Update the state\n    this.setState({ currentDeviceID: event.target.value });\n    // Switch Spotify play to selected device\n    await spotify.transferMyPlayback([event.target.value]);\n  }\n\n  async startButtonClickHandler() {\n    // Play Spotify using the selected device\n    await spotify.play({ device_id: this.state.currentDeviceID });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <DeviceSelect\n          value={this.state.currentDeviceID}\n          onChange={this.deviceSelectChangeHandler}\n          devices={this.state.devices}\n        />\n        <StartButton onClick={this.startButtonClickHandler} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}