{"version":3,"sources":["taboo/view.cljs"],"mappings":"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","names":["taboo.view/dev-words","taboo.view/styles","G__39547","js/module$node_modules$$material_ui$core$styles$makeStyles.default","theme","cljs-bean.core/->clj","card-width","card-height","next-button-height","next-button-margin","fexpr__39548","fexpr__39552","fexpr__39554","fexpr__39557","fexpr__39561","fexpr__39560","fexpr__39567","fexpr__39562","fexpr__39563","fexpr__39564","fexpr__39565","fexpr__39566","fexpr__39549","fexpr__39550","fexpr__39558","fexpr__39559","fexpr__39556","fexpr__39551","fexpr__39553","fexpr__39555","taboo.view/classname","classes","classnames","cljs.core/vector?","cljs.core/PersistentVector","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$3","p1__39568#","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core.get.cljs$core$IFn$_invoke$arity$2","p__39570","map__39571","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","taboo.view/review","wordsets","setReviewing","js/crinkle.component.react-createElement*","cljs.core.comp.cljs$core$IFn$_invoke$arity$1","p__39573","vec__39574","seq__39575","cljs.core/seq","first__39576","cljs.core/first","cljs.core/next","target","taboo","p1__39569#","js/module$node_modules$$material_ui$core$Button$index.default","_e","p__39578","map__39579","taboo.view/card","js/module$node_modules$$material_ui$core$Card$index.default","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/even?","cljs.core/count","js/module$node_modules$$material_ui$core$CardHeader$index.default","clojure.string/upper-case","js/module$node_modules$$material_ui$core$CardContent$index.default","p1__39577#","p__39581","map__39582","taboo.view/start-card","p__39584","map__39585","taboo.view/swipe-card","classname","child-card","on-card-left-screen","js/module$taboo$react_tinder_card.TinderCard","cljs.core/identity","p__39587","map__39588","taboo.view/deck","extra-classes","setT","p__39590","vec__39591","seq__39592","first__39593","crinkle.component/create-element-raw-props","cljs.core/inc","p__39594","map__39595","taboo.view/clock","timer","minutes","seconds","cljs.core/mod","goog.string/format","p__39597","map__39598","taboo.view/game","vec__39600","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__39603","vec__39606","vec__39609","vec__39612","game-seconds","js/URLSearchParams","js/window.location.search","js/parseInt","custom-game-length","js/isNaN","excess","t","js/module$node_modules$react$index.useState","setWordsets","G__39615","cljs.core/reverse","cljs.core.take.cljs$core$IFn$_invoke$arity$2","taboo.words/words","setTimer","turn","setTurn","G__39616","reviewing?","G__39617","G__39618","js/module$node_modules$react$index.useEffect","G__39619","cljs.core.subvec.cljs$core$IFn$_invoke$arity$3","cljs.core/constantly","G__39620","G__39621","cljs.core/drop-last","G__39622","p__39623","vec__39624","start","end","G__39627","G__39628","interval","js/setInterval","G__39629","x","js/clearInterval","and__4174__auto__","cljs.core/second","taboo.view/app"],"sourcesContent":["(ns taboo.view\n  (:require\n   [\"./react-tinder-card\" :refer [TinderCard]]\n   [\"@material-ui/core/Button\" :default Button]\n   [\"@material-ui/core/Card\" :default Card]\n   [\"@material-ui/core/CardContent\" :default CardContent]\n   [\"@material-ui/core/CardHeader\" :default CardHeader]\n   [\"@material-ui/core/styles/makeStyles\" :default makeStyles]\n   [\"@material-ui/icons/Check\" :default CheckIcon]\n   [\"@material-ui/icons/Clear\" :default ClearIcon]\n   [\"@material-ui/icons/FastForward\" :default FastForwardIcon]\n   [\"@material-ui/icons/FastRewind\" :default FastRewindIcon]\n   [\"@material-ui/icons/Redo\" :default RedoIcon]\n   [\"react\" :as react]\n   [cljs-bean.core :refer [->clj]]\n   [clojure.string :as str]\n   [crinkle.component :refer [CE RE]]\n   [crinkle.dom :as d]\n   [goog.string :as gstr]\n   [goog.string.format]\n   [taboo.words :as w]))\n\n;; TODO can I do a floating, arrow down to show to scroll on the review panel?\n;; TODO rotate cards to it looks like a stack\n;; TODO after rotating cards, visually prepare next card when swiping top card so it is vertical and easy to read\n\n;; Card visual reference https://www.bestchoicereviews.org/wp-content/uploads/2014/12/taboo-card-and-board-games.jpg\n\n(def dev-words\n  [[\"A\" \"a\" \"a\" \"a\" \"a\"]\n   [\"B\" \"b\" \"b\" \"b\" \"b\"]\n   [\"C\" \"c\" \"c\" \"c\" \"c\"]\n   [\"D\" \"d\" \"d\" \"d\" \"d\"]\n   [\"E\" \"e\" \"e\" \"e\" \"e\"]])\n\n(def styles\n  (makeStyles (fn [theme]\n                (let [theme              (->clj theme)\n                      card-width         260\n                      card-height        (* 1.5 card-width)\n                      next-button-height 60\n                      next-button-margin ((:spacing theme) 1.0)]\n                  #js {:app          #js {:fontFamily    \"'Walter Turncoat', 'Roboto', sans-serif\" ;; , cursive (phone was making cursive weird but may have been bad import)\n                                          :dispaly       \"flex\"\n                                          :flexDirection \"column\"}\n                       :deck         #js {:marginTop ((:spacing theme) 4.0)\n                                          :width     card-width\n                                          :height    card-height}\n                       :tinder-card  #js {:position \"absolute\"\n                                          :top      0\n                                          :bottom   0\n                                          :left     0\n                                          :right    0}\n                       :card         #js {:textAlign   \"center\"\n                                          :marginLeft  \"auto\"\n                                          :marginRight \"auto\"\n                                          :marginTop   ((:spacing theme) 4.0)\n                                          :width       card-width\n                                          :height      card-height}\n                       :card-header  #js {:color   \"white\"\n                                          :height  (* 0.1 card-height)\n                                          :padding ((:spacing theme) 2.0)}\n                       :card-content #js {:backgroundColor \"seashell\"\n                                          :padding         ((:spacing theme) 2.0)\n                                          :marginLeft      ((:spacing theme) 1.0)\n                                          :marginRight     ((:spacing theme) 1.0)\n                                          :marginBottom    ((:spacing theme) 1.0)\n                                          :height          (- card-height\n                                                              ;; minus header and header padding\n                                                              (* 0.1 card-height)\n                                                              (* 2 ((:spacing theme) 2.0))\n                                                              ;; minus content padding\n                                                              (* 2 ((:spacing theme) 2.0))\n                                                              ;; minus content margin\n                                                              ((:spacing theme) 1.0)\n                                                              ;; Actual border\n                                                              ((:spacing theme) 1.0))\n                                          :display         \"flex\"\n                                          :flexDirection   \"column\"\n                                          :justifyContent  \"space-evenly\"}\n\n                       :taboo          #js {:marginTop    ((:spacing theme) 1.5)\n                                            :marginBottom ((:spacing theme) 1.5)}\n                       :purple         #js {:backgroundColor \"#8e2dfc\"}\n                       :green          #js {:backgroundColor \"#27c4a8\"}\n                       :blue           #js {:backgroundColor \"dodgerblue\"}\n                       :front          #js {:zIndex -1}\n                       :clock          #js {:fontFamily \"'Roboto Mono', monospace\"\n                                            :textAlign  \"center\"\n                                            :margin     ((:spacing theme) 4.0)}\n                       :clock-span     #js {:fontSize 24} ;; TODO look into using (:typography theme)\n                       :invisible      #js {:visibility \"hidden\"}\n                       :display-none   #js {:display \"none\"}\n                       :next-button    #js {:height (str next-button-height \"px\")\n                                            :margin next-button-margin}\n                       :history-button #js {:height (str (+ (* next-button-height 3) (* next-button-margin 4)) \"px\")\n                                            :margin ((:spacing theme) 1.0)}\n                       :review         #js {:background    \"linear-gradient(0deg, #e3ffe7 0%, #d9e7ff 100%)\"\n                                            :position      \"absolute\"\n                                            :top           0\n                                            :right         0\n                                            :left          0\n                                            :display       \"flex\"\n                                            :flexDirection \"column\"\n                                            :padding       ((:spacing theme) 2.0)}\n                       :review-item    #js {:fontFamily \"'Roboto', sans-serif\"\n                                            :margin     ((:spacing theme) 2.0)}\n                       :review-target  #js {:fontSize   \"larger\"\n                                            :fontWeight \"bold\"}\n                       :review-taboo   #js {:margin ((:spacing theme) 2.0)}\n                       :review-button  #js {:margin ((:spacing theme) 2.0)}}))))\n\n(defn classname\n  [classes classnames]\n  (let [classnames (if (vector? classnames)\n                     classnames\n                     (vector classnames))]\n    (str/join \" \" (into []\n                        (map #(get classes %))\n                        classnames))))\n\n(defn review\n  [{:keys [classes wordsets setReviewing]}]\n  (d/div {:className (:review classes)}\n         (into []\n               (comp\n                 (map (fn [[target & taboo]]\n                        (d/div {:className (:review-item classes)\n                                :key       target}\n                               (d/div {:className (:review-target classes)} target)\n                               (into []\n                                     (map #(d/div {:className (:review-taboo classes)\n                                                   :key       (str target \"/\" %)}\n                                                  %))\n                                     taboo)))))\n               wordsets)\n         (RE Button {:className (:review-button classes)\n                     :variant   \"contained\"\n                     :color     \"primary\"\n                     :onClick   (fn [_e]\n                                  (setReviewing false))}\n             \"Continue\")))\n\n(defn card\n  [{:keys [classes target taboo]}]\n  (RE Card {:className (classname classes [:card (if (= target \"Ready?\")\n                                                   :blue\n                                                   (if (even? (count target))\n                                                     :purple\n                                                     :green))])}\n      (RE CardHeader {:className             (:card-header classes)\n                      :title                 (str/upper-case target)\n                      ;; If I want to use same font as other text.\n                      ;; Alternatively, and better, is to pass in titleTypographyProps\n                      #_#_:disableTypography true})\n      (RE CardContent {:className (:card-content classes)}\n          (into []\n                (map #(d/div {:key       %\n                              :className (:taboo classes)}\n                             (str/upper-case %)))\n                taboo))))\n\n(defn start-card\n  [{:keys [classes]}]\n  (RE Card {:className (classname classes [:blue])}))\n\n(defn swipe-card\n  [{:keys [classname child-card on-card-left-screen]}]\n  (RE TinderCard {:className        classname\n                  :preventSwipe     #js [\"up\" \"down\"]\n                  :onSwipe          identity ;; function required\n                  :onCardLeftScreen on-card-left-screen}\n      child-card))\n\n(defn deck\n  [{:keys [classes extra-classes wordsets setT]}]\n  (d/div {:className (str (:deck classes) \" \" extra-classes)}\n         (into []\n               (map (fn [[target & taboo]]\n                      (CE swipe-card {:classname           (classname classes [:tinder-card])\n                                      :on-card-left-screen (fn []\n                                                             (setT inc))\n                                      :child-card          (CE card {:classes classes\n                                                                     :target  target\n                                                                     :taboo   taboo})}\n                          :key target)))\n               wordsets)))\n\n(defn clock\n  [{:keys [classes extra-classes timer]}]\n  (let [minutes (int (/ timer 60))\n        seconds (mod timer 60)]\n    (d/div {:className (str (:clock classes) \" \" extra-classes)}\n           (d/span {:className (:clock-span classes)}\n                   (str minutes \":\" (gstr/format \"%02d\" seconds))))))\n\n(defn game\n  [{:keys [classes]}]\n  (let [game-seconds              (as-> (-> (js/URLSearchParams. js/window.location.search) (.get \"t\") js/parseInt)\n                                      custom-game-length\n                                    (if (js/isNaN custom-game-length)\n                                      61\n                                      custom-game-length))\n        excess                    5\n        [t setT]                  (react/useState 0)\n        [wordsets setWordsets]    (react/useState (reverse (take excess w/words)))\n        [timer setTimer]          (react/useState 0)\n        [turn setTurn]            (react/useState [0 0])\n        [reviewing? setReviewing] (react/useState false)]\n    ;; (prn (into [] (map first) wordsets))\n    ;; (prn \"t:\" t)\n    ;; (prn \"timer:\" timer)\n    ;; (prn \"turn:\" turn)\n\n    ;; t triggers wordsets update\n    (react/useEffect (fn []\n                       (setWordsets (reverse (subvec w/words t (+ t excess))))\n                       (constantly nil))\n                     #js[t])\n\n    ;; skip leftover card when round is over\n    (react/useEffect (fn []\n                       (when (zero? timer)\n                         (setWordsets drop-last)\n                         (setT inc)\n                         (setTurn (fn [[start end]]\n                                    [end t]))\n                         (setReviewing true))\n                       (constantly nil))\n                     #js[timer])\n\n    ;; countdown timer\n    (react/useEffect (fn []\n                       (let [interval (js/setInterval\n                                        (fn []\n                                          (setTimer (fn [x]\n                                                      (if (> x 0)\n                                                        (dec x)\n                                                        0))))\n                                        1000)]\n                         (fn []\n                           (js/clearInterval interval))))\n                     #js[])\n\n    (d/div {:className (:game classes)}\n           ;; Using a when outside of swipe-card causes it to entirely re-render since the\n           ;; old one would be off screen if it still existed. If I rewrite the js swiping lib\n           ;; I can fix that.\n           (when (zero? timer)\n             (CE swipe-card {:classname           (classname classes [:tinder-card :front])\n                             :on-card-left-screen (fn []\n                                                    (setTimer game-seconds))\n                             :child-card          (CE card {:classes classes\n                                                            :target  \"Ready?\"\n                                                            :taboo   [\"Swipe to begin\"]})}))\n           (when (and (zero? timer) reviewing? (pos? (second turn)))\n             (CE review {:classes      classes\n                         :wordsets     (subvec w/words (inc (first turn)) (inc (second turn)))\n                         :setReviewing setReviewing}))\n           (CE deck {:classes       classes\n                     :extra-classes (when (zero? timer) (:display-none classes))\n                     :wordsets      wordsets\n                     :setT          setT})\n           (CE clock {:classes       classes\n                      :extra-classes (when (zero? timer) (:invisible classes))\n                      :timer         timer}))))\n\n(defn app\n  []\n  (let [classes (->clj (styles))]\n    (d/div {:className (:app classes)}\n           (CE game {:classes classes}))))\n"]}